{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","name","email","CardList","monsters","map","key","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsterList","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"qVAIaA,G,MAAO,SAACC,GACjB,OACI,yBAAKC,UAAU,kBACX,yBAAKC,IAAI,UAAUC,IAAK,mEACxB,4BAAMH,EAAMI,QAAQC,MACpB,uBAAGJ,UAAU,eAAgBD,EAAMI,QAAQE,UCL1CC,G,MAAW,SAACP,GACrB,OACA,wBAAIC,UAAU,aAEND,EAAMQ,SAASC,KAAI,SAAAL,GAAO,OAEtB,kBAAC,EAAD,CAAMM,IAAMN,EAAQO,GAAKP,QAASA,UCPrCQ,G,MAAY,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACrC,OACI,2BACAb,UAAY,SACZc,KAAO,SACPF,YAAeA,EACfG,SAAWF,MCmDJG,G,kBArDb,aAAc,IAAD,8BACX,+CA6BFH,aAAe,SAACI,GAAQ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SA5B3D,EAAKC,MAAQ,CACXf,SAAW,GACXY,YAAa,IAJJ,E,iFAuBO,IAAD,OACjBI,MAAM,6CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACX,SAAUoB,S,+BAMjC,IAAD,EAC4BC,KAAKN,MAA/Bf,EADF,EACEA,SAAUY,EADZ,EACYA,YACZU,EAAsBtB,EAASuB,QAAO,SAAA3B,GAAO,OACjDA,EAAQC,KAAK2B,cAAcC,SAASb,EAAYY,kBAGlD,OACE,yBAAK/B,UAAU,OACb,4BAAQA,UAAU,cAChB,+CACA,kBAAC,EAAD,CACAY,YAAY,iBACZC,aAAiBe,KAAKf,eAEtB,kBAAC,EAAD,CAAUN,SAAUsB,U,GA/CZI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.22215eb9.chunk.js","sourcesContent":["/* eslint-disable no-template-curly-in-string */\r\nimport React from 'react';\r\nimport './card.style.css';\r\n\r\nexport const Card = (props) => {\r\n    return(\r\n        <div className=\"card-container\">\r\n            <img alt=\"monster\" src={'https://robohash.org/${props.monster.id}?set=set2&size=180x180'}/>\r\n            <h6>{ props.monster.name }</h6>\r\n            <p className=\"email-style\">{ props.monster.email }</p>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Card } from '../card/card.component'\r\nimport './card-list.style.css';\r\n\r\nexport const CardList = (props) => {\r\n    return(\r\n    <h2 className=\"card-list\">\r\n        {  \r\n            props.monsters.map(monster => \r\n                (\r\n                <Card key={ monster.id } monster={monster} />\r\n                )\r\n            ) \r\n        }\r\n    </h2>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './search.style.css';\r\n\r\nexport const SearchBox = ( {placeholder, handleChange}) => {\r\n    return(\r\n        <input \r\n        className = \"search\"\r\n        type = \"search\" \r\n        placeholder= { placeholder } \r\n        onChange={ handleChange }\r\n        />\r\n    );\r\n}\r\n","import React, {Component} from 'react';\n//import logo from './logo.svg';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search/search.component';\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();   //Get the state from the Component Class that is extent.\n    this.state = {\n      monsters : [],\n      searchField: '' \n      /*{\n          name: 'Frankistein',\n          key: 'a1'\n        },\n        {\n          name: 'Vampire',\n          key: 'a2'\n        },\n        {\n          name: 'Zombie',\n          key: 'a3'\n        }*/\n  }\n}\n\n//Life cycle Method from Component class\n//We get response from fetch() and convert it to response.json() which returns a promise and we need to catch it using .then() in which you can change the state using setState().\n  \n  componentDidMount(){\n    fetch('http://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  //A class methos with => automatically sets the context to where it is defined for this keyword.\n  handleChange = (e) => { this.setState({searchField: e.target.value}) };\n\n  render(){\n    const { monsters, searchField } = this.state; \n    const filteredMonsterList = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1>Monster Rolodex</h1>\n          <SearchBox \n          placeholder=\"Search Monster\"\n          handleChange = { this.handleChange }\n          />  \n          <CardList monsters={filteredMonsterList}/>  \n        </header>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}